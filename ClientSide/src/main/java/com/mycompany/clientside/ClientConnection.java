/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.clientside;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.*;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author NhatQuoc
 */
public class ClientConnection extends javax.swing.JFrame {

    private final String HOST = "127.0.0.1";
    private int PORT;
    private ArrayList<Player> listPlayer;
    private BufferedReader in;
    private PrintWriter out;
    private Socket client;
    private String name;

    private String keyword;
    private String hint;
    private int length;
    private int intTurn;
    private Timer timerM;
    private Timer timerO;

    private boolean isMyTurn;
    private int time;

    /**
     * Creates new form ClientConnection
     */
    public ClientConnection() {
        initComponents();
        listPlayer = new ArrayList<Player>();
        txtGuessKey.setText("");
        setTurn(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        labStatus = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtScoreBoard = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNotice = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtKeyword = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtHint = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        txtCurrentPlayer = new javax.swing.JLabel();
        labTimer = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtGuessChar = new javax.swing.JTextField();
        txtGuessKey = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        labGuessChar = new javax.swing.JLabel();
        labCurrentTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Magical Wheel Client");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Magical Wheel");

        jLabel2.setText("PORT:");

        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNameKeyReleased(evt);
            }
        });

        jLabel3.setText("Name:");

        btnConnect.setText("Connect");
        btnConnect.setEnabled(false);
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        labStatus.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        labStatus.setForeground(new java.awt.Color(255, 0, 51));

        btnExit.setBackground(new java.awt.Color(153, 0, 0));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(143, 143, 143))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConnect)
                        .addGap(66, 66, 66)
                        .addComponent(btnExit)
                        .addGap(35, 35, 35))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(labStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btnConnect)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        jPanel2.setAutoscrolls(true);

        jLabel5.setText("Name");

        jLabel6.setText("Score");

        txtScoreBoard.setFont(new java.awt.Font("Cascadia Code PL", 1, 14)); // NOI18N
        txtScoreBoard.setForeground(new java.awt.Color(0, 102, 204));
        txtScoreBoard.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(txtScoreBoard);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("List Of Players");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(48, 48, 48))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtNotice.setEditable(false);
        txtNotice.setForeground(new java.awt.Color(51, 153, 0));
        jScrollPane2.setViewportView(txtNotice);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Question");

        jLabel9.setText("Keyword:");

        txtKeyword.setEditable(false);
        txtKeyword.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        txtKeyword.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel10.setText("Hint:");

        txtHint.setEditable(false);
        txtHint.setFont(new java.awt.Font("Calibri", 2, 12)); // NOI18N
        txtHint.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(txtHint);

        jLabel11.setText("Current turn:");

        txtCurrentPlayer.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        txtCurrentPlayer.setText("NAME");

        labTimer.setFont(new java.awt.Font("Exo 2", 1, 36)); // NOI18N
        labTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labTimer.setText("00");

        jLabel7.setText("Guess Character: ");

        jLabel13.setText("Guess Keyword:");

        txtGuessChar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGuessCharKeyReleased(evt);
            }
        });

        btnSubmit.setBackground(new java.awt.Color(0, 102, 153));
        btnSubmit.setText("SUBMIT");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        labGuessChar.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        labGuessChar.setForeground(new java.awt.Color(255, 0, 0));

        labCurrentTime.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labCurrentTime.setText("00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jSeparator3))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(txtCurrentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(labCurrentTime))
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                            .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(24, 24, 24))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 27, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jLabel8)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel13))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtGuessChar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labGuessChar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(labTimer)
                                .addGap(70, 70, 70))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtGuessKey, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47))))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCurrentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)
                                    .addComponent(labCurrentTime)))
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(txtGuessChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labGuessChar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(labTimer))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtGuessKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSubmit)
                        .addGap(16, 16, 16))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(266, 266, 266))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyReleased
        String PATTERN = "^([A-Za-z0-9_]+)$";
        Pattern patt = Pattern.compile(PATTERN);
        Matcher match = patt.matcher(txtName.getText());
        if (txtName.getText().length() > 10) {
            labStatus.setText("The name cannot be longer than 10 characters!!");
            btnConnect.setEnabled(false);

        } else if (!match.matches()) {
            labStatus.setText("The name can only use the characters a-z, A-Z, 0-9 and \"_\"");
            btnConnect.setEnabled(false);

        } else {
            labStatus.setText("");
            btnConnect.setEnabled(true);
        }
    }//GEN-LAST:event_txtNameKeyReleased

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        PORT = Integer.parseInt(txtPort.getText());
        
        txtPort.setEditable(false);
        txtName.setEditable(false);

        try {

            client = new Socket(HOST, PORT);
            in = new BufferedReader(new InputStreamReader(client.getInputStream()));
            out = new PrintWriter(client.getOutputStream(), true);

            this.name = txtName.getText();
            out.println(this.name);

            String response = in.readLine();
            if (response.contains("This name is already in use") || response.contains("The room is out of slot")) {
                txtName.setText("");
                client.close();
                in.close();
                out.close();
            } else {
                btnConnect.setEnabled(false);
                new Thread(() -> {
                    listenResponse();
                }).start();
            }
            JOptionPane.showMessageDialog(this, response);

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "I/O ERROR: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        if (client != null) {
            try {
                client.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        submitAction();
        stopTimer();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void stopTimer() {
        if (timerM != null) {
            timerM.stop();
        }
        if (timerO != null) {
            timerO.stop();
        }
        labCurrentTime.setText("00");
        labTimer.setText("00");

    }

    private void submitAction() {
        if (this.isMyTurn) {
            out.println("CHAR\n" + txtGuessChar.getText());
            out.println("KEY\n" + txtGuessKey.getText());
            txtGuessChar.setText("");
            txtGuessKey.setText("");
        }
    }

    private void txtGuessCharKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGuessCharKeyReleased
        if (txtGuessChar.getText().length() == 0) {
            btnSubmit.setEnabled(false);
        } else if (txtGuessChar.getText().length() > 1) {
            labGuessChar.setText("Just one char");
            btnSubmit.setEnabled(false);
        } else {
            btnSubmit.setEnabled(true);
        }
    }//GEN-LAST:event_txtGuessCharKeyReleased

    private void recieveListPlayer() {

        listPlayer.clear();//đảm bảo không bị trùng player
        String name;
        int score;

        try {
            while (true) {
                name = in.readLine();
                if (name.equals("END_INFO")) {
                    break;
                }
                score = Integer.parseInt(in.readLine());
                Player p = new Player(name, score);
                listPlayer.add(p);
            }
            printScoreBoard();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "ERROR: Can not recive list player!!");
            ex.printStackTrace();
        }

    }

    private void recieveQuestion() {
        String temp;
        intTurn = 0;
        setTurn(false);
        printNotice("New game just started");
        try {
            while (true) {
                temp = in.readLine();
                if (temp.equals("END_QUESTION")) {
                    break;
                }
                length = Integer.parseInt(temp);
                keyword = in.readLine();
                hint = in.readLine();
                time = Integer.parseInt(in.readLine());

            }

            printQuestion();

        } catch (IOException ex) {
            Logger.getLogger(ClientConnection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void recieveCurrentTurn() {
        String name = "";
        try {
            name = in.readLine();
            if (name.equals(this.name)) {
                this.intTurn++;
                setTurn(true);
                mainCountDown();
                txtCurrentPlayer.setText("YOUR TURN NOW");
                System.out.println("Turn: " + this.intTurn);
                //hết giờ tự submit
            } else {
                txtCurrentPlayer.setText(name);
                ortherCountDown();
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientConnection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTurn(boolean status) {
        btnSubmit.setEnabled(status);
        txtGuessChar.setEditable(status);
        if (this.intTurn > 2) {
            txtGuessKey.setEditable(status);
        } else {
            txtGuessKey.setEditable(false);
        }
        this.isMyTurn = status;
    }
    
    private void recieveDialog(){
        try {
            String msg;

            while (true) {
                msg = in.readLine();
                if (msg.equals("END_DIALOG")) {
                    break;
                }
                JOptionPane.showMessageDialog(this, msg);
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientConnection.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Can not read notification from server!!");
        }
    }

    private void recieveNotice() {
        try {
            String msg;

            while (true) {
                msg = in.readLine();
                if (msg.contains("WINNER") || msg.contains("letters in the keyword") || msg.contains("is wrong character") || msg.contains("WRONG KEYWORD")) {
                    stopTimer();
                }
                if (msg.contains("you lose your turn") || msg.contains("GREAT") || msg.contains("Maybe this question so difficult")) {
                    stopTimer();
                    setTurn(false);
                }
                if (msg.equals("END_NOTICE")) {
                    break;
                }
                printNotice(msg);
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientConnection.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Can not read notification from server!!");
        }
    }

    private void recieveBlurKeyword() {
        try {
            String res;
            while (true) {
                res = in.readLine();
                if (res.equals("END_BLUR")) {
                    break;
                }
                this.keyword = res;
                updateKeyword();
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientConnection.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Can not read notification from server!!");
        }
    }

    private void recieveScore() {
        try {
            String name;
            while (true) {
                name = in.readLine();
                if (name.equals("END_SCORE")) {
                    break;
                }
                for (Player player : listPlayer) {
                    if (player.getName().equals(name)) {
                        player.setScore(Integer.parseInt(in.readLine()));
                    }
                }
            }

            printScoreBoard();

        } catch (IOException ex) {
            Logger.getLogger(ClientConnection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printQuestion() {
        printNotice("The length of keyword: " + this.length);
        updateKeyword();
        txtHint.setText(hint);
    }

    private void updateKeyword() {
        txtKeyword.setText(keyword);
    }

    private void printScoreBoard() {
        String scoreBoard = "";
        for (Player player : listPlayer) {
            scoreBoard = scoreBoard + " " + player.getName() + "\t      " + player.getScore() + "\n";
        }

        txtScoreBoard.setText(scoreBoard);
    }

    private void mainCountDown() {
        timerM = new Timer(1000, new ActionListener() {
            private int t = time;

            @Override
            public void actionPerformed(ActionEvent e) {
                t--;
                if (t == 0) {
                    labTimer.setText("00");
                    submitAction();
                    printNotice("TIMES UP!! The answer have been sent");
                    setTurn(false);

                    t = time;
                    timerM.stop();
                } else if (t < 10) {
                    labTimer.setText("0" + t);
                } else {
                    labTimer.setText("" + t);
                }
            }
        });

        timerM.start();
    }

    private void ortherCountDown() {
        timerO = new Timer(1000, new ActionListener() {
            private int t = time;

            @Override
            public void actionPerformed(ActionEvent e) {
                t--;
                if (t == 0) {
                    labCurrentTime.setText("00");

                    t = time;
                    timerO.stop();
                } else if (t < 10) {
                    labCurrentTime.setText("0" + t);
                } else {
                    labCurrentTime.setText("" + t);
                }
            }
        });

        timerO.start();
    }

    //display notice board
    private void printNotice(String msg) {
        String temp = txtNotice.getText();
        temp = temp + "\n" + msg;
        txtNotice.setText(temp);
    }

    //lắng nghe response từ server, luôn chạy, router để thực hiện các actions đúng với respone đó
    private void listenResponse() {
        try {
            while (true) {
                String res = in.readLine();

                System.out.println("res: " + res);
                if (res.equals("INFO")) {
                    recieveListPlayer();
                } else if (res.equals("QUESTION")) {
                    recieveQuestion();
                } else if (res.equals("NOTICE")) {
                    recieveNotice();
                } else if (res.equals("TURN")) {
                    recieveCurrentTurn();
                } else if (res.equals("BLUR")) {
                    recieveBlurKeyword();
                } else if (res.equals("SCORE")) {
                    recieveScore();
                } else if( res.equals("DIALOG")){
                    recieveDialog();
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "ERROR: Can not listen response form server!!");
            ex.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientConnection().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labCurrentTime;
    private javax.swing.JLabel labGuessChar;
    private javax.swing.JLabel labStatus;
    private javax.swing.JLabel labTimer;
    private javax.swing.JLabel txtCurrentPlayer;
    private javax.swing.JTextField txtGuessChar;
    private javax.swing.JTextField txtGuessKey;
    private javax.swing.JTextPane txtHint;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextPane txtNotice;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextPane txtScoreBoard;
    // End of variables declaration//GEN-END:variables
}
