/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.serverside;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author NhatQuoc
 */
public class ServerConnection extends javax.swing.JFrame {

    private ServerSocket server;
    private int PORT;
    private int numberOfPlayers;
    private static ArrayList<PlayerHandler> listPlayer;
    private ExecutorService pool;
    private ArrayList<QuestionHandler> listQuestion;
    private int time;
    private Timer timer;
    private boolean isFinish;

    /**
     * Creates new form ServerConnection
     */
    public ServerConnection() {
        initComponents();
        listPlayer = new ArrayList<PlayerHandler>();
        loadData();
        initTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNumberOfPlayers = new javax.swing.JTextField();
        btnListen = new javax.swing.JButton();
        labStatus = new javax.swing.JLabel();
        btnStop = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtScoreBoard = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnNewGame = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNotice = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtKeyword = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtHint = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        txtCurrentPlayer = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        labTime = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cbbTime = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Magical Wheel Server");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("SERVER");

        jLabel2.setText("PORT:");

        jLabel3.setText("Number Of Players:");

        txtNumberOfPlayers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumberOfPlayersKeyReleased(evt);
            }
        });

        btnListen.setBackground(new java.awt.Color(0, 153, 153));
        btnListen.setText("Listen");
        btnListen.setEnabled(false);
        btnListen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListenActionPerformed(evt);
            }
        });

        labStatus.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        labStatus.setForeground(new java.awt.Color(255, 0, 51));
        labStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnStop.setBackground(new java.awt.Color(153, 0, 51));
        btnStop.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnStop.setText("STOP");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNumberOfPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnListen)
                        .addGap(18, 18, 18)
                        .addComponent(btnStop))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(labStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListen)
                    .addComponent(txtNumberOfPlayers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnStop))
                .addGap(14, 14, 14))
        );

        jPanel2.setAutoscrolls(true);

        jLabel5.setText("Name");

        jLabel6.setText("Score");

        txtScoreBoard.setEditable(false);
        txtScoreBoard.setFont(new java.awt.Font("Cascadia Code PL", 1, 14)); // NOI18N
        txtScoreBoard.setForeground(new java.awt.Color(0, 102, 204));
        jScrollPane2.setViewportView(txtScoreBoard);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(40, 40, 40))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("List Of Players");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("NOTICE BOARD");

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnNewGame.setBackground(new java.awt.Color(0, 102, 102));
        btnNewGame.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnNewGame.setText("New Game");
        btnNewGame.setEnabled(false);
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGameActionPerformed(evt);
            }
        });

        txtNotice.setEditable(false);
        txtNotice.setForeground(new java.awt.Color(51, 153, 0));
        jScrollPane1.setViewportView(txtNotice);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Question");

        jLabel9.setText("Keyword:");

        txtKeyword.setEditable(false);
        txtKeyword.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        txtKeyword.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel10.setText("Hint:");

        txtHint.setEditable(false);
        txtHint.setFont(new java.awt.Font("Calibri", 2, 12)); // NOI18N
        txtHint.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(txtHint);

        jLabel11.setText("Turn:");

        txtCurrentPlayer.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        txtCurrentPlayer.setText("Current Player");

        jLabel13.setText("TIME:");

        labTime.setFont(new java.awt.Font("Exo 2", 1, 24)); // NOI18N
        labTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labTime.setText("00");

        jLabel15.setText("Time of ech turn");

        cbbTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbbTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnNewGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtCurrentPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel13)
                                .addGap(39, 39, 39)
                                .addComponent(labTime, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnNewGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCurrentPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13)
                            .addComponent(labTime, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(jLabel4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(260, 260, 260)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(174, 174, 174))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListenActionPerformed
        // TODO add your handling code here:
        PORT = Integer.parseInt(txtPort.getText());
        numberOfPlayers = Integer.parseInt(txtNumberOfPlayers.getText());
        pool = Executors.newFixedThreadPool(numberOfPlayers);

        txtPort.setEditable(false);
        txtNumberOfPlayers.setEditable(false);

        new Thread(() -> {

            try {
                server = new ServerSocket(PORT);
                JOptionPane.showMessageDialog(this, "Listening on port " + PORT);
                btnListen.setEnabled(false);

                while (true) {

                    Socket player = server.accept();
                    BufferedReader in = new BufferedReader(new InputStreamReader(player.getInputStream()));
                    PrintWriter out = new PrintWriter(player.getOutputStream(), true);

                    String name = in.readLine();

                    if (numberOfPlayers == listPlayer.size()) {
                        out.println("The room is out of slot");
                        player.close();
                        in.close();
                        out.close();
                    } else if (checkDuplicate(name)) { // Kiểm tra trùng tên

                        PlayerHandler playerThread = new PlayerHandler(name, player, in, out, this);
                        listPlayer.add(playerThread);
                        printNotice(name + " was involved");

                        //kiểm tra nếu đủ người thì enabled NewGame Button
                        if (numberOfPlayers == listPlayer.size()) {
                            btnNewGame.setEnabled(true);
                            printNotice("Already have enough players, can get started now!!");
                        }

                        printScoreBoard();
                        //gửi thoong báo đăng ký thành công và gửi cho client danh sách Players
                        out.println("Registration Completed Successfully");
                        sendListPlayer();

                        pool.execute(playerThread);
                    } else {
                        out.println("This name is already in use");
                        player.close();
                        in.close();
                        out.close();
                    }
                }

            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "I/O ERROR: " + ex.getMessage());

            }
        }).start();

    }//GEN-LAST:event_btnListenActionPerformed

    private void txtNumberOfPlayersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumberOfPlayersKeyReleased
        int i;
        try {
            i = Integer.parseInt(txtNumberOfPlayers.getText());
            if (i < 2 || i > 10) {
                labStatus.setText("The number of players ranges from 2-10!");
                btnListen.setEnabled(false);
            } else {
                labStatus.setText("");
                btnListen.setEnabled(true);

            }
        } catch (Exception e) {
            labStatus.setText("Invalid number!!");
            btnListen.setEnabled(false);

        }
    }//GEN-LAST:event_txtNumberOfPlayersKeyReleased

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        for (PlayerHandler player : listPlayer) {
            player.close();
        }

        if (this.server != null) {
            try {
                server.close();
            } catch (IOException ex) {
                Logger.getLogger(ServerConnection.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        System.exit(0);
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed

        isFinish = false;
        sendQuestionToAll();
        btnNewGame.setEnabled(false);
        cbbTime.setEditable(false);

        new Thread(() -> {
            //thông báo người đầu tiền sẵn sàng cho lượt chơi của họ
            listPlayer.get(0).sendNotice("READY FOR YOUR TURN!! Your turn will start in 3 seconds");
            try {
                Thread.sleep(3 * 1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(ServerConnection.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (int i = 0; i < 5; i++) {
                if (isFinish) {
                    break;
                }
                alignTurn();
            }

            for (PlayerHandler p : listPlayer) {
                p.sendNotice("Maybe this question so difficult, let's try with another question");
            }

            listPlayer.get(0).sendDialogToAll("Let's try with another question!!");

            if (timer != null) {
                timer.stop();
                labTime.setText("00");
            }

        }).start();

    }//GEN-LAST:event_btnNewGameActionPerformed

    private void cbbTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTimeActionPerformed
        this.time = Integer.parseInt("" + cbbTime.getSelectedItem());
        labTime.setText("" + this.time);
    }//GEN-LAST:event_cbbTimeActionPerformed

    public void setIsFinish(boolean b) {
        this.isFinish = b;
    }

    public boolean getIsFinish() {
        return this.isFinish;
    }

    private void initTime() {
        for (int i = 10; i <= 60; i++) {
            cbbTime.addItem("" + i);
        }
    }

    private void sendQuestionToAll() {
        int i = getRandomNumber(listQuestion.size());
        for (PlayerHandler player : listPlayer) {
            player.setQuestion(listQuestion.get(i));
            player.getOut().println("QUESTION");
            player.sendLengthOfKeyword();
            player.sendKeyword();
            player.sendDescription();
            player.getOut().println(this.time);
            player.getOut().println("END_QUESTION");
        }
        txtKeyword.setText(listQuestion.get(i).getKeyword());
        txtHint.setText(listQuestion.get(i).getDescription());
    }

    public void countDown(int time) {
        timer = new Timer(1000, new ActionListener() {
            private int t = time;

            @Override
            public void actionPerformed(ActionEvent e) {
                t--;
                if (t == 0) {
                    t = time;
                    labTime.setText("00");
                    timer.stop();
                } else if (t < 10) {
                    labTime.setText("0" + t);
                } else {
                    labTime.setText("" + t);
                }
            }
        });

        timer.start();
    }

    public void alignTurn() {

        PlayerHandler p;
        for (int i = 0; i < listPlayer.size(); i++) {
            p = listPlayer.get(i);
            if (p.getDisqualified()) {
                continue;
            }
            // thông báo cho người chơi tiếp theo chuẩn bị
            {
                if (i + 1 < listPlayer.size()) {
                    listPlayer.get(0).sendNotice("READY FOR YOUR TURN!! The next turn is yours");
                }
            }

            if (timer != null) {
                timer.stop();
                labTime.setText("00");
            }
            p.sendTurnToAll(p.getName());
            //send name of current player to all
            countDown(this.time);
            txtCurrentPlayer.setText(p.getName());
            try {
                for (int j = 0; j < (this.time + 1) * 2; j++) {

                    if (isFinish || p.getIsTurn() || p.getIsSubmit()) {
                        break;
                    }
                    Thread.sleep(500);
                }

                p.setIsSubmit(false);

                if (isFinish) {
                    if (timer != null) {
                        timer.stop();
                        labTime.setText("00");
                        btnNewGame.setEnabled(true);
                        cbbTime.setEditable(true);
                    }
                    p.setIsTurn(false);
                    break;
                }
                if (p.getIsTurn()) {
                    --i;
                    p.setIsTurn(false);
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(ServerConnection.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR: Can not delay time!!");
            }
        }
    }
    //Kiểm tra trùng tên function

    private boolean checkDuplicate(String name) {
        if (listPlayer.size() > 0) {
            for (PlayerHandler player : listPlayer) {
                if (player.getName().equals(name)) {
                    return false; // trùng trả về false
                }
            }
        }

        return true; //không trùng trả về true
    }

    //load data từ database.txt
    private void loadData() {
        this.listQuestion = new ArrayList<QuestionHandler>();
        String key, des;
        try {
            Scanner fin = new Scanner(Paths.get("database.txt"));
            while (fin.hasNextLine()) {
                key = fin.nextLine();
                des = fin.nextLine();
                QuestionHandler ques = new QuestionHandler(key, des);

                this.listQuestion.add(ques);
            }
            fin.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Can't load data from database!!\nERROR: " + ex.getMessage());
        }

    }

    //truyền set listPlayer cho từng player
    private void updateListPlayerForEachPlayer() {
        for (PlayerHandler player : listPlayer) {
            player.setListPlayer(listPlayer);
        }
    }

    //truyền list of player cho client function
    private void sendListPlayer() {
        updateListPlayerForEachPlayer();
        for (PlayerHandler player : listPlayer) {
            player.getOut().println("INFO");
        }

        for (PlayerHandler player : listPlayer) {
            player.sendInfoToAll();
        }

        for (PlayerHandler player : listPlayer) {
            player.getOut().println("END_INFO");
        }

    }

    //display score board
    public void printScoreBoard() {
        String scoreBoard = "";
        for (PlayerHandler player : listPlayer) {
            scoreBoard = scoreBoard + " " + player.getName() + "\t      " + player.getScore() + "\n";
        }

        txtScoreBoard.setText(scoreBoard);
    }

    //display notice board
    private void printNotice(String msg) {
        String temp = txtNotice.getText();
        temp = temp + "\n" + msg;
        txtNotice.setText(temp);
    }

    //get random number
    private int getRandomNumber(int max) {
        int ramdomNumber = (int) (Math.random() * (max));
        return ramdomNumber;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerConnection().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnListen;
    private javax.swing.JButton btnNewGame;
    private javax.swing.JButton btnStop;
    private javax.swing.JComboBox<String> cbbTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labStatus;
    private javax.swing.JLabel labTime;
    private javax.swing.JLabel txtCurrentPlayer;
    private javax.swing.JTextPane txtHint;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextPane txtNotice;
    private javax.swing.JTextField txtNumberOfPlayers;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextPane txtScoreBoard;
    // End of variables declaration//GEN-END:variables
}
